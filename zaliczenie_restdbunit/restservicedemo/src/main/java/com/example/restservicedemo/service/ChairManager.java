package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.example.restservicedemo.domain.Chair;
import com.example.restservicedemo.domain.Person;

public class ChairManager {

    private Connection connection;

    private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private static final String CREATE_TABLE_CHAIR = "CREATE TABLE Chair(c_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(start with 1), model varchar(20), yop integer, owner_id bigint FOREIGN KEY references Person(p_id))";

    private PreparedStatement addChairStmt;
    private PreparedStatement sellChairStmt;
    private PreparedStatement getChairWithOwnerStmt;
    private PreparedStatement getAllChairsStmt;
    private PreparedStatement getChairByIdStmt;
    private PreparedStatement removeChairStmt;
    private PreparedStatement deleteAllChairsStmt;

    private PreparedStatement dropTable;
    private Statement statement;

    public ChairManager() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;

            rs = connection.getMetaData().getTables(null, null, null, null);
            tableExists = false;
            while (rs.next()) {
                if ("Chair".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(CREATE_TABLE_CHAIR);

            addChairStmt = connection.prepareStatement(
                    "INSERT INTO Chair (model, yop) VALUES (?, ?)");
            sellChairStmt = connection.prepareStatement(
                    "UPDATE Chair SET owner_id = ? WHERE c_id = ?");
            deleteAllChairsStmt = connection.prepareStatement(
                    "DELETE FROM Chair");
            removeChairStmt = connection.prepareStatement(
                    "DELETE FROM Chair where c_id = ?");
            getChairWithOwnerStmt = connection.prepareStatement(
            		"SELECT p_id, name, yob, c_id, model, yop, owner_id FROM Person JOIN Chair ON owner_id=p_id WHERE c_id=?");
            getChairByIdStmt = connection.prepareStatement(
                    "SELECT * FROM Chair where c_id = ?");
            getAllChairsStmt = connection.prepareStatement(
                    "SELECT * FROM Chair");
            dropTable = connection.prepareStatement(
                    "DROP TABLE Chair"
            );

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public void clearChairs() {
        try {
            deleteAllChairsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addChair(Chair chair) {
        int count = 0;
        try {
            addChairStmt.setString(1, chair.getModel());
            addChairStmt.setInt(2, chair.getYop());

            count = addChairStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public void dropTable() throws SQLException {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;

            rs = connection.getMetaData().getTables(null, null, null, null);
            tableExists = false;
            while (rs.next()) {
                if ("Chair".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            if (tableExists)
                dropTable.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Chair> getAllChairs() {

        List<Chair> chairs = new ArrayList<Chair>();
        PersonManager pm = new PersonManager();

        try {
            ResultSet rs = getAllChairsStmt.executeQuery();

            while (rs.next()) {
                Chair c = new Chair();
                Person p = pm.getPerson(rs.getInt("owner_id"));
                c.setId(rs.getInt("c_id"));
                c.setModel(rs.getString("model"));
                c.setYop(rs.getInt("yop"));
                c.setOwner(p);
                chairs.add(c);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return chairs;
    }

    public int removeChair(Chair chair) {
        int count = 0;
        try {
            removeChairStmt.setLong(1, chair.getId());
            count = removeChairStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public Chair getChairWithOwner(Chair chair) {

        Chair c = new Chair();
        try {

            getChairWithOwnerStmt.setLong(1, chair.getId());
            ResultSet rs = getChairWithOwnerStmt.executeQuery();

            while (rs.next()) {

                Person p = new Person();

                p.setId(rs.getInt("p_id"));
                p.setFirstName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));

                c.setId(rs.getInt("c_id"));
                c.setModel(rs.getString("model"));
                c.setYop(rs.getInt("yop"));

                c.setOwner(p);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return c;
    }

    public int sellChair(Chair chair, Person person) {
		if(!person.hasId() && !chair.hasId())
			return -1;
        int count = 0;
        try {

            sellChairStmt.setLong(1, person.getId());
            sellChairStmt.setLong(2, chair.getId());


            count = sellChairStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public Chair getChair(int id) {
        Chair c = new Chair();
        PersonManager pm = new PersonManager();
        try {
            getChairByIdStmt.setInt(1, id);
            ResultSet rs = getChairByIdStmt.executeQuery();

            while (rs.next()) {
                Person p = pm.getPerson(rs.getInt("owner_id"));

                c.setId(rs.getInt("c_id"));
                c.setModel(rs.getString("model"));
                c.setYop(rs.getInt("yop"));
                c.setOwner(p);
                break;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return c;
    }
}